// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: executor.proto

package executor

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SupporterExecutor service

type SupporterExecutorService interface {
	FindTaskKey(ctx context.Context, in *FindTaskKeyReq, opts ...client.CallOption) (*FindTaskKeyResp, error)
	FindTaskByKey(ctx context.Context, in *FindTaskByKeyReq, opts ...client.CallOption) (*FindTaskByKeyResp, error)
	DeleteTaskByKey(ctx context.Context, in *DeleteTaskByKeyReq, opts ...client.CallOption) (*DeleteTaskByKeyResp, error)
	InsertPhone(ctx context.Context, in *InsertPhoneReq, opts ...client.CallOption) (*InsertPhoneResp, error)
	FindClientByIp(ctx context.Context, in *FindClientByIpReq, opts ...client.CallOption) (*FindClientByIpResp, error)
}

type supporterExecutorService struct {
	c    client.Client
	name string
}

func NewSupporterExecutorService(name string, c client.Client) SupporterExecutorService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "executor"
	}
	return &supporterExecutorService{
		c:    c,
		name: name,
	}
}

func (c *supporterExecutorService) FindTaskKey(ctx context.Context, in *FindTaskKeyReq, opts ...client.CallOption) (*FindTaskKeyResp, error) {
	req := c.c.NewRequest(c.name, "SupporterExecutor.FindTaskKey", in)
	out := new(FindTaskKeyResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supporterExecutorService) FindTaskByKey(ctx context.Context, in *FindTaskByKeyReq, opts ...client.CallOption) (*FindTaskByKeyResp, error) {
	req := c.c.NewRequest(c.name, "SupporterExecutor.FindTaskByKey", in)
	out := new(FindTaskByKeyResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supporterExecutorService) DeleteTaskByKey(ctx context.Context, in *DeleteTaskByKeyReq, opts ...client.CallOption) (*DeleteTaskByKeyResp, error) {
	req := c.c.NewRequest(c.name, "SupporterExecutor.DeleteTaskByKey", in)
	out := new(DeleteTaskByKeyResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supporterExecutorService) InsertPhone(ctx context.Context, in *InsertPhoneReq, opts ...client.CallOption) (*InsertPhoneResp, error) {
	req := c.c.NewRequest(c.name, "SupporterExecutor.InsertPhone", in)
	out := new(InsertPhoneResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supporterExecutorService) FindClientByIp(ctx context.Context, in *FindClientByIpReq, opts ...client.CallOption) (*FindClientByIpResp, error) {
	req := c.c.NewRequest(c.name, "SupporterExecutor.FindClientByIp", in)
	out := new(FindClientByIpResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SupporterExecutor service

type SupporterExecutorHandler interface {
	FindTaskKey(context.Context, *FindTaskKeyReq, *FindTaskKeyResp) error
	FindTaskByKey(context.Context, *FindTaskByKeyReq, *FindTaskByKeyResp) error
	DeleteTaskByKey(context.Context, *DeleteTaskByKeyReq, *DeleteTaskByKeyResp) error
	InsertPhone(context.Context, *InsertPhoneReq, *InsertPhoneResp) error
	FindClientByIp(context.Context, *FindClientByIpReq, *FindClientByIpResp) error
}

func RegisterSupporterExecutorHandler(s server.Server, hdlr SupporterExecutorHandler, opts ...server.HandlerOption) error {
	type supporterExecutor interface {
		FindTaskKey(ctx context.Context, in *FindTaskKeyReq, out *FindTaskKeyResp) error
		FindTaskByKey(ctx context.Context, in *FindTaskByKeyReq, out *FindTaskByKeyResp) error
		DeleteTaskByKey(ctx context.Context, in *DeleteTaskByKeyReq, out *DeleteTaskByKeyResp) error
		InsertPhone(ctx context.Context, in *InsertPhoneReq, out *InsertPhoneResp) error
		FindClientByIp(ctx context.Context, in *FindClientByIpReq, out *FindClientByIpResp) error
	}
	type SupporterExecutor struct {
		supporterExecutor
	}
	h := &supporterExecutorHandler{hdlr}
	return s.Handle(s.NewHandler(&SupporterExecutor{h}, opts...))
}

type supporterExecutorHandler struct {
	SupporterExecutorHandler
}

func (h *supporterExecutorHandler) FindTaskKey(ctx context.Context, in *FindTaskKeyReq, out *FindTaskKeyResp) error {
	return h.SupporterExecutorHandler.FindTaskKey(ctx, in, out)
}

func (h *supporterExecutorHandler) FindTaskByKey(ctx context.Context, in *FindTaskByKeyReq, out *FindTaskByKeyResp) error {
	return h.SupporterExecutorHandler.FindTaskByKey(ctx, in, out)
}

func (h *supporterExecutorHandler) DeleteTaskByKey(ctx context.Context, in *DeleteTaskByKeyReq, out *DeleteTaskByKeyResp) error {
	return h.SupporterExecutorHandler.DeleteTaskByKey(ctx, in, out)
}

func (h *supporterExecutorHandler) InsertPhone(ctx context.Context, in *InsertPhoneReq, out *InsertPhoneResp) error {
	return h.SupporterExecutorHandler.InsertPhone(ctx, in, out)
}

func (h *supporterExecutorHandler) FindClientByIp(ctx context.Context, in *FindClientByIpReq, out *FindClientByIpResp) error {
	return h.SupporterExecutorHandler.FindClientByIp(ctx, in, out)
}
