// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: manager.proto

package manager

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SupporterManager service

type SupporterManagerService interface {
	FindTaskBySecret(ctx context.Context, in *FindTaskBySecretReq, opts ...client.CallOption) (*FindTaskBySecretResp, error)
	InsertTask(ctx context.Context, in *InsertTaskReq, opts ...client.CallOption) (*InsertTaskResp, error)
	PushTask(ctx context.Context, in *PushTaskReq, opts ...client.CallOption) (*PushTaskResp, error)
}

type supporterManagerService struct {
	c    client.Client
	name string
}

func NewSupporterManagerService(name string, c client.Client) SupporterManagerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "manager"
	}
	return &supporterManagerService{
		c:    c,
		name: name,
	}
}

func (c *supporterManagerService) FindTaskBySecret(ctx context.Context, in *FindTaskBySecretReq, opts ...client.CallOption) (*FindTaskBySecretResp, error) {
	req := c.c.NewRequest(c.name, "SupporterManager.FindTaskBySecret", in)
	out := new(FindTaskBySecretResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supporterManagerService) InsertTask(ctx context.Context, in *InsertTaskReq, opts ...client.CallOption) (*InsertTaskResp, error) {
	req := c.c.NewRequest(c.name, "SupporterManager.InsertTask", in)
	out := new(InsertTaskResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supporterManagerService) PushTask(ctx context.Context, in *PushTaskReq, opts ...client.CallOption) (*PushTaskResp, error) {
	req := c.c.NewRequest(c.name, "SupporterManager.PushTask", in)
	out := new(PushTaskResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SupporterManager service

type SupporterManagerHandler interface {
	FindTaskBySecret(context.Context, *FindTaskBySecretReq, *FindTaskBySecretResp) error
	InsertTask(context.Context, *InsertTaskReq, *InsertTaskResp) error
	PushTask(context.Context, *PushTaskReq, *PushTaskResp) error
}

func RegisterSupporterManagerHandler(s server.Server, hdlr SupporterManagerHandler, opts ...server.HandlerOption) error {
	type supporterManager interface {
		FindTaskBySecret(ctx context.Context, in *FindTaskBySecretReq, out *FindTaskBySecretResp) error
		InsertTask(ctx context.Context, in *InsertTaskReq, out *InsertTaskResp) error
		PushTask(ctx context.Context, in *PushTaskReq, out *PushTaskResp) error
	}
	type SupporterManager struct {
		supporterManager
	}
	h := &supporterManagerHandler{hdlr}
	return s.Handle(s.NewHandler(&SupporterManager{h}, opts...))
}

type supporterManagerHandler struct {
	SupporterManagerHandler
}

func (h *supporterManagerHandler) FindTaskBySecret(ctx context.Context, in *FindTaskBySecretReq, out *FindTaskBySecretResp) error {
	return h.SupporterManagerHandler.FindTaskBySecret(ctx, in, out)
}

func (h *supporterManagerHandler) InsertTask(ctx context.Context, in *InsertTaskReq, out *InsertTaskResp) error {
	return h.SupporterManagerHandler.InsertTask(ctx, in, out)
}

func (h *supporterManagerHandler) PushTask(ctx context.Context, in *PushTaskReq, out *PushTaskResp) error {
	return h.SupporterManagerHandler.PushTask(ctx, in, out)
}
