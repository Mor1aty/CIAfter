// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: filecenter.proto

package filecenter

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SupporterFileCenter service

type SupporterFileCenterService interface {
	InsertFile(ctx context.Context, in *InsertFileReq, opts ...client.CallOption) (*InsertFileResp, error)
	FindFileById(ctx context.Context, in *FindFileByIdReq, opts ...client.CallOption) (*FindFileByIdResp, error)
	FindFileByTaskAndSecret(ctx context.Context, in *FindFileByTaskAndSecretReq, opts ...client.CallOption) (*FindFileByTaskAndSecretResp, error)
}

type supporterFileCenterService struct {
	c    client.Client
	name string
}

func NewSupporterFileCenterService(name string, c client.Client) SupporterFileCenterService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "filecenter"
	}
	return &supporterFileCenterService{
		c:    c,
		name: name,
	}
}

func (c *supporterFileCenterService) InsertFile(ctx context.Context, in *InsertFileReq, opts ...client.CallOption) (*InsertFileResp, error) {
	req := c.c.NewRequest(c.name, "SupporterFileCenter.InsertFile", in)
	out := new(InsertFileResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supporterFileCenterService) FindFileById(ctx context.Context, in *FindFileByIdReq, opts ...client.CallOption) (*FindFileByIdResp, error) {
	req := c.c.NewRequest(c.name, "SupporterFileCenter.FindFileById", in)
	out := new(FindFileByIdResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supporterFileCenterService) FindFileByTaskAndSecret(ctx context.Context, in *FindFileByTaskAndSecretReq, opts ...client.CallOption) (*FindFileByTaskAndSecretResp, error) {
	req := c.c.NewRequest(c.name, "SupporterFileCenter.FindFileByTaskAndSecret", in)
	out := new(FindFileByTaskAndSecretResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SupporterFileCenter service

type SupporterFileCenterHandler interface {
	InsertFile(context.Context, *InsertFileReq, *InsertFileResp) error
	FindFileById(context.Context, *FindFileByIdReq, *FindFileByIdResp) error
	FindFileByTaskAndSecret(context.Context, *FindFileByTaskAndSecretReq, *FindFileByTaskAndSecretResp) error
}

func RegisterSupporterFileCenterHandler(s server.Server, hdlr SupporterFileCenterHandler, opts ...server.HandlerOption) error {
	type supporterFileCenter interface {
		InsertFile(ctx context.Context, in *InsertFileReq, out *InsertFileResp) error
		FindFileById(ctx context.Context, in *FindFileByIdReq, out *FindFileByIdResp) error
		FindFileByTaskAndSecret(ctx context.Context, in *FindFileByTaskAndSecretReq, out *FindFileByTaskAndSecretResp) error
	}
	type SupporterFileCenter struct {
		supporterFileCenter
	}
	h := &supporterFileCenterHandler{hdlr}
	return s.Handle(s.NewHandler(&SupporterFileCenter{h}, opts...))
}

type supporterFileCenterHandler struct {
	SupporterFileCenterHandler
}

func (h *supporterFileCenterHandler) InsertFile(ctx context.Context, in *InsertFileReq, out *InsertFileResp) error {
	return h.SupporterFileCenterHandler.InsertFile(ctx, in, out)
}

func (h *supporterFileCenterHandler) FindFileById(ctx context.Context, in *FindFileByIdReq, out *FindFileByIdResp) error {
	return h.SupporterFileCenterHandler.FindFileById(ctx, in, out)
}

func (h *supporterFileCenterHandler) FindFileByTaskAndSecret(ctx context.Context, in *FindFileByTaskAndSecretReq, out *FindFileByTaskAndSecretResp) error {
	return h.SupporterFileCenterHandler.FindFileByTaskAndSecret(ctx, in, out)
}
