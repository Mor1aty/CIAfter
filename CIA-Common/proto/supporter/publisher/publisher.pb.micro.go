// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: publisher.proto

package publisher

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SupporterPublisher service

type SupporterPublisherService interface {
	FindAllBusiness(ctx context.Context, in *FindAllBusinessReq, opts ...client.CallOption) (*FindAllBusinessResp, error)
	UpdateBusinessEdition(ctx context.Context, in *UpdateBusinessEditionReq, opts ...client.CallOption) (*UpdateBusinessEditionResp, error)
}

type supporterPublisherService struct {
	c    client.Client
	name string
}

func NewSupporterPublisherService(name string, c client.Client) SupporterPublisherService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "publisher"
	}
	return &supporterPublisherService{
		c:    c,
		name: name,
	}
}

func (c *supporterPublisherService) FindAllBusiness(ctx context.Context, in *FindAllBusinessReq, opts ...client.CallOption) (*FindAllBusinessResp, error) {
	req := c.c.NewRequest(c.name, "SupporterPublisher.FindAllBusiness", in)
	out := new(FindAllBusinessResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supporterPublisherService) UpdateBusinessEdition(ctx context.Context, in *UpdateBusinessEditionReq, opts ...client.CallOption) (*UpdateBusinessEditionResp, error) {
	req := c.c.NewRequest(c.name, "SupporterPublisher.UpdateBusinessEdition", in)
	out := new(UpdateBusinessEditionResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SupporterPublisher service

type SupporterPublisherHandler interface {
	FindAllBusiness(context.Context, *FindAllBusinessReq, *FindAllBusinessResp) error
	UpdateBusinessEdition(context.Context, *UpdateBusinessEditionReq, *UpdateBusinessEditionResp) error
}

func RegisterSupporterPublisherHandler(s server.Server, hdlr SupporterPublisherHandler, opts ...server.HandlerOption) error {
	type supporterPublisher interface {
		FindAllBusiness(ctx context.Context, in *FindAllBusinessReq, out *FindAllBusinessResp) error
		UpdateBusinessEdition(ctx context.Context, in *UpdateBusinessEditionReq, out *UpdateBusinessEditionResp) error
	}
	type SupporterPublisher struct {
		supporterPublisher
	}
	h := &supporterPublisherHandler{hdlr}
	return s.Handle(s.NewHandler(&SupporterPublisher{h}, opts...))
}

type supporterPublisherHandler struct {
	SupporterPublisherHandler
}

func (h *supporterPublisherHandler) FindAllBusiness(ctx context.Context, in *FindAllBusinessReq, out *FindAllBusinessResp) error {
	return h.SupporterPublisherHandler.FindAllBusiness(ctx, in, out)
}

func (h *supporterPublisherHandler) UpdateBusinessEdition(ctx context.Context, in *UpdateBusinessEditionReq, out *UpdateBusinessEditionResp) error {
	return h.SupporterPublisherHandler.UpdateBusinessEdition(ctx, in, out)
}
