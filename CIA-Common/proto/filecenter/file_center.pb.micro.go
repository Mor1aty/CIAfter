// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: file_center.proto

package filecenter

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for InsertFile service

type InsertFileService interface {
	InsertFile(ctx context.Context, in *InsertFileReq, opts ...client.CallOption) (*InsertFileResp, error)
}

type insertFileService struct {
	c    client.Client
	name string
}

func NewInsertFileService(name string, c client.Client) InsertFileService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "filecenter"
	}
	return &insertFileService{
		c:    c,
		name: name,
	}
}

func (c *insertFileService) InsertFile(ctx context.Context, in *InsertFileReq, opts ...client.CallOption) (*InsertFileResp, error) {
	req := c.c.NewRequest(c.name, "InsertFile.InsertFile", in)
	out := new(InsertFileResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InsertFile service

type InsertFileHandler interface {
	InsertFile(context.Context, *InsertFileReq, *InsertFileResp) error
}

func RegisterInsertFileHandler(s server.Server, hdlr InsertFileHandler, opts ...server.HandlerOption) error {
	type insertFile interface {
		InsertFile(ctx context.Context, in *InsertFileReq, out *InsertFileResp) error
	}
	type InsertFile struct {
		insertFile
	}
	h := &insertFileHandler{hdlr}
	return s.Handle(s.NewHandler(&InsertFile{h}, opts...))
}

type insertFileHandler struct {
	InsertFileHandler
}

func (h *insertFileHandler) InsertFile(ctx context.Context, in *InsertFileReq, out *InsertFileResp) error {
	return h.InsertFileHandler.InsertFile(ctx, in, out)
}

// Client API for FindFile service

type FindFileService interface {
	FindFileById(ctx context.Context, in *FindFileByIdReq, opts ...client.CallOption) (*FindFileByIdResp, error)
}

type findFileService struct {
	c    client.Client
	name string
}

func NewFindFileService(name string, c client.Client) FindFileService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "filecenter"
	}
	return &findFileService{
		c:    c,
		name: name,
	}
}

func (c *findFileService) FindFileById(ctx context.Context, in *FindFileByIdReq, opts ...client.CallOption) (*FindFileByIdResp, error) {
	req := c.c.NewRequest(c.name, "FindFile.FindFileById", in)
	out := new(FindFileByIdResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FindFile service

type FindFileHandler interface {
	FindFileById(context.Context, *FindFileByIdReq, *FindFileByIdResp) error
}

func RegisterFindFileHandler(s server.Server, hdlr FindFileHandler, opts ...server.HandlerOption) error {
	type findFile interface {
		FindFileById(ctx context.Context, in *FindFileByIdReq, out *FindFileByIdResp) error
	}
	type FindFile struct {
		findFile
	}
	h := &findFileHandler{hdlr}
	return s.Handle(s.NewHandler(&FindFile{h}, opts...))
}

type findFileHandler struct {
	FindFileHandler
}

func (h *findFileHandler) FindFileById(ctx context.Context, in *FindFileByIdReq, out *FindFileByIdResp) error {
	return h.FindFileHandler.FindFileById(ctx, in, out)
}

// Client API for FindTaskFile service

type FindTaskFileService interface {
	FindFileByTaskAndSecret(ctx context.Context, in *FindFileByTaskAndSecretReq, opts ...client.CallOption) (*FindFileByTaskAndSecretResp, error)
}

type findTaskFileService struct {
	c    client.Client
	name string
}

func NewFindTaskFileService(name string, c client.Client) FindTaskFileService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "filecenter"
	}
	return &findTaskFileService{
		c:    c,
		name: name,
	}
}

func (c *findTaskFileService) FindFileByTaskAndSecret(ctx context.Context, in *FindFileByTaskAndSecretReq, opts ...client.CallOption) (*FindFileByTaskAndSecretResp, error) {
	req := c.c.NewRequest(c.name, "FindTaskFile.FindFileByTaskAndSecret", in)
	out := new(FindFileByTaskAndSecretResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FindTaskFile service

type FindTaskFileHandler interface {
	FindFileByTaskAndSecret(context.Context, *FindFileByTaskAndSecretReq, *FindFileByTaskAndSecretResp) error
}

func RegisterFindTaskFileHandler(s server.Server, hdlr FindTaskFileHandler, opts ...server.HandlerOption) error {
	type findTaskFile interface {
		FindFileByTaskAndSecret(ctx context.Context, in *FindFileByTaskAndSecretReq, out *FindFileByTaskAndSecretResp) error
	}
	type FindTaskFile struct {
		findTaskFile
	}
	h := &findTaskFileHandler{hdlr}
	return s.Handle(s.NewHandler(&FindTaskFile{h}, opts...))
}

type findTaskFileHandler struct {
	FindTaskFileHandler
}

func (h *findTaskFileHandler) FindFileByTaskAndSecret(ctx context.Context, in *FindFileByTaskAndSecretReq, out *FindFileByTaskAndSecretResp) error {
	return h.FindTaskFileHandler.FindFileByTaskAndSecret(ctx, in, out)
}
