// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: filecenter.proto

package filecenter

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FileCenter service

type FileCenterService interface {
	Upload(ctx context.Context, in *UploadReq, opts ...client.CallOption) (*UploadResp, error)
	FindFile(ctx context.Context, in *FindFileReq, opts ...client.CallOption) (*FindFileResp, error)
	FindTaskFile(ctx context.Context, in *FindTaskFileReq, opts ...client.CallOption) (*FindTaskFileResp, error)
}

type fileCenterService struct {
	c    client.Client
	name string
}

func NewFileCenterService(name string, c client.Client) FileCenterService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "filecenter"
	}
	return &fileCenterService{
		c:    c,
		name: name,
	}
}

func (c *fileCenterService) Upload(ctx context.Context, in *UploadReq, opts ...client.CallOption) (*UploadResp, error) {
	req := c.c.NewRequest(c.name, "FileCenter.Upload", in)
	out := new(UploadResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileCenterService) FindFile(ctx context.Context, in *FindFileReq, opts ...client.CallOption) (*FindFileResp, error) {
	req := c.c.NewRequest(c.name, "FileCenter.FindFile", in)
	out := new(FindFileResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileCenterService) FindTaskFile(ctx context.Context, in *FindTaskFileReq, opts ...client.CallOption) (*FindTaskFileResp, error) {
	req := c.c.NewRequest(c.name, "FileCenter.FindTaskFile", in)
	out := new(FindTaskFileResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileCenter service

type FileCenterHandler interface {
	Upload(context.Context, *UploadReq, *UploadResp) error
	FindFile(context.Context, *FindFileReq, *FindFileResp) error
	FindTaskFile(context.Context, *FindTaskFileReq, *FindTaskFileResp) error
}

func RegisterFileCenterHandler(s server.Server, hdlr FileCenterHandler, opts ...server.HandlerOption) error {
	type fileCenter interface {
		Upload(ctx context.Context, in *UploadReq, out *UploadResp) error
		FindFile(ctx context.Context, in *FindFileReq, out *FindFileResp) error
		FindTaskFile(ctx context.Context, in *FindTaskFileReq, out *FindTaskFileResp) error
	}
	type FileCenter struct {
		fileCenter
	}
	h := &fileCenterHandler{hdlr}
	return s.Handle(s.NewHandler(&FileCenter{h}, opts...))
}

type fileCenterHandler struct {
	FileCenterHandler
}

func (h *fileCenterHandler) Upload(ctx context.Context, in *UploadReq, out *UploadResp) error {
	return h.FileCenterHandler.Upload(ctx, in, out)
}

func (h *fileCenterHandler) FindFile(ctx context.Context, in *FindFileReq, out *FindFileResp) error {
	return h.FileCenterHandler.FindFile(ctx, in, out)
}

func (h *fileCenterHandler) FindTaskFile(ctx context.Context, in *FindTaskFileReq, out *FindTaskFileResp) error {
	return h.FileCenterHandler.FindTaskFile(ctx, in, out)
}
